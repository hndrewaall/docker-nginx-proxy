# If we receive X-Forwarded-Proto, pass it through; otherwise, pass along the
# scheme used to connect to this server
map $http_x_forwarded_proto $proxy_x_forwarded_proto {
  default $http_x_forwarded_proto;
  ''      $scheme;
}

# If we receive Upgrade, set Connection to "upgrade"; otherwise, delete any
# Connection header that may have been passed to this server
map $http_upgrade $proxy_connection {
  default upgrade;
  ''      '';
}

gzip_types text/plain text/css application/javascript application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

log_format vhost '$host $remote_addr - $remote_user [$time_local] '
                 '"$request" $status $body_bytes_sent '
                 '"$http_referer" "$http_user_agent"';

access_log /proc/self/fd/1 vhost;
error_log /proc/self/fd/2;

client_max_body_size {{ .Env.MAX_BODY_SIZE }};

# HTTP 1.1 support
proxy_http_version 1.1;
proxy_buffering off;
proxy_set_header Host $http_host;
proxy_set_header Upgrade $http_upgrade;
proxy_set_header Connection $proxy_connection;
proxy_set_header X-Real-IP $remote_addr;
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
proxy_set_header X-Forwarded-Proto $proxy_x_forwarded_proto;

server {
	listen 80 default_server;
	server_name _; # This is just an invalid value which will never trigger on a real hostname.
	return {{ .Env.GLOB_HTTP_NO_SERVICE }};
}

{{ range $host, $containers := groupByMulti $ "Env.VIRTUAL_HOST" "," }}

upstream {{ $host }} {
    
{{ range $container := $containers }}

	{{ $addrLen := len $container.Addresses }}
    
	{{ if eq $addrLen 1 }}
	{{/* Address/Port count == 1, use the only one */}}
    
		{{ with $address := index $container.Addresses 0 }}
            # {{$container.Name}}
		   server {{ $address.IP }}:{{ $address.Port }};
		{{ end }}
        
	
	{{ else if $container.Env.VIRTUAL_PORT }}
    {{/* Port count != 1, VIRTUAL_PORT found, use given */}}
    
		{{ range $address := .Addresses }}
        
		   {{ if eq $address.Port $container.Env.VIRTUAL_PORT }}
		   # {{$container.Name}}
		   server {{ $address.IP }}:{{ $address.Port }};
		   {{ end }}
           
		{{ end }}
	
	{{ else }}
    {{/* Try to default to standard web port 80, but check if worked */}}
    
        {{ $webFallbackSuccess := 0}}
	
    	{{ range $address := $container.Addresses }}

			{{ if eq $address.Port "80" }}
            
			# {{$container.Name}}
			server {{ $address.IP }}:{{ $address.Port }};

            {{ $webFallbackSuccess := 1}}

			{{ end }}

		{{ end }}
        
        {{ if (and (ne $webFallbackSuccess 1) (gt $addrLen 0) ) }}
        {{/* Default port not found, but VIRTUAL_HOST was given and one ore more addresses specified. Linking to first port found.*/}}
        {{/* Linking to first port found as last case.*/}}
                
        {{ with $address := index $container.Addresses 0 }}
        server {{ $address.IP }}:{{ $address.Port }};
        {{ end }}
        
        {{ end }}

	{{ end }}
{{ end }}
}

{{/* Get the first cert name defined by containers w/ the same vhost */}}
{{ $certName := (first (groupByKeys $containers "Env.CERT_NAME")) }}

{{/* Get the best matching cert by name for the vhost. Will insert bundled INFIX if given.*/}}
{{ $vhostCert := (closest (dir "/etc/nginx/certs") (printf "%s%s.crt" $host .Env.GLOB_SSL_CERT_BUNDLE_INFIX))}}


{{/* vhostCert is actually a filename so remove any suffixes since they are added later */}}
{{ $vhostCert := replace $vhostCert ".crt" "" -1 }}
{{ $vhostCert := replace $vhostCert ".key" "" -1 }}

{{/* Use the cert specifid on the container or fallback to the best vhost match */}}
{{ $cert := (coalesce $certName $vhostCert) }}
{{ $keyFile := replace $cert .Env.GLOB_SSL_CERT_BUNDLE_INFIX "" -1 }}

{{ if (and (ne $cert "") (exists (printf "/etc/nginx/certs/%s.crt" $cert)) (exists (printf "/etc/nginx/certs/%s.key" $keyFile))) }}


{{ if (eq .Env.AUTO_REDIRECT_WITH_PREFIX_ENABLED true) }}

server {


    {{ if (eq .Env.AUTO_REDIRECT_DIRECTION 0) }}
    {{/* Redirect prefixed host to plain host via moved permanently */}}
    
    server_name  {{ .Env.AUTO_REDIRECT_PREFIX }}.{{ $host }};
    rewrite ^(.*) https://{{ $host }}$1 permanent;
    
    {{ else }}
    {{/* Redirect non-prefixed host to prefixed host via moved permanently */}}
    
    server_name {{ $host }};
    rewrite ^(.*) https://{{ .Env.AUTO_REDIRECT_PREFIX }}.{{ $host }}$1 permanent;
    
    {{ end }} # AUTO_REDIRECT_DIRECTION end

}

{{ end }} # AUTO_REDIRECT_WITH_PREFIX_ENABLED end

# enforce ssl if enabled
server {
	server_name {{ $host }};
	rewrite ^(.*) https://{{ $host }}$1 permanent;
}

# ssl server
server {
	server_name {{ $host }};
	listen 443 ssl;

	ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
	ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA;

	ssl_prefer_server_ciphers on;
	ssl_session_timeout {{ .Env.GLOB_SSL_SESSION_TIMEOUT }};
	ssl_session_cache shared:SSL:50m;

	ssl_certificate /etc/nginx/certs/{{ (printf "%s.crt" $cert) }};
	ssl_certificate_key /etc/nginx/certs/{{ (printf "%s.key" $keyFile) }};

	add_header Strict-Transport-Security "max-age=31536000; includeSubdomains";

	location / {
		proxy_pass http://{{ $host }};
		{{ if (exists (printf "/etc/nginx/htpasswd/%s" $host)) }}
		auth_basic	{{ .Env.GLOB_AUTH_MSG }} {{ $host }};
		auth_basic_user_file	{{ (printf "/etc/nginx/htpasswd/%s" $host) }};
		{{ end }}
	}
}
{{ else }}

{{ if (eq .Env.AUTO_REDIRECT_WITH_PREFIX_ENABLED true) }}

server {
    {{ if (eq .Env.AUTO_REDIRECT_DIRECTION 0) }}
    
    server_name  {{ .Env.AUTO_REDIRECT_PREFIX }}.{{ $host }};
    rewrite ^(.*) http://{{ $host }}$1 permanent;
   
    {{ else }}
    
    server_name {{ $host }};
    rewrite ^(.*) http://{{ .Env.AUTO_REDIRECT_PREFIX }}.{{ $host }}$1 permanent;
    
    {{ end }} # AUTO_REDIRECT_DIRECTION end
}

{{ end }} # AUTO_REDIRECT_WITH_PREFIX_ENABLED end

server {
	server_name {{ $host }};

	location / {
		proxy_pass http://{{ $host }};
		{{ if (exists (printf "/etc/nginx/htpasswd/%s" $host)) }}
		auth_basic	{{ .Env.GLOB_AUTH_MSG }}{{ $host }};
		auth_basic_user_file	{{ (printf "/etc/nginx/htpasswd/%s" $host) }};
		{{ end }}
	}
}

server {
	server_name {{ $host }};
	listen 443 ssl;
	return {{ .Env.GLOB_HTTP_NO_SERVICE }};

	{{ if (and (exists "/etc/nginx/certs/default.crt") (exists "/etc/nginx/certs/default.key")) }}
	ssl_certificate /etc/nginx/certs/default.crt;
	ssl_certificate_key /etc/nginx/certs/default.key;
	{{ end }}
}

{{ end }}
{{ end }}
